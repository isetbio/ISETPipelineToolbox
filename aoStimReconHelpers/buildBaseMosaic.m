function [theConeMosaic, theDisplay] = buildBaseMosaic(pr, cnv, st, useDisplay) 
% Synopsis:
%    Build the starting core retinal mosaic based on general parameters
%
% Description:
%    Run this function prior to building a corresponding render structure
%    or visualizing an image montage. 
%
% See also: aoStimRecon, aoStimReconRunMany, buildRenderStruct,
% buildMosaicMontage

% History:
%   03/24/24  chr  Made it a callable function
%% Build base mosaic using input parameters
%
% Get display
if useDisplay
    theDisplayLoad = load(fullfile(pr.aoReconDir, 'displays', [pr.displayName 'Display.mat']));
    eval(['theDisplay = theDisplayLoad.' cnv.displayFieldName ';']);
    if (cnv.overwriteDisplayGamma)
        gammaInput = linspace(0,1,2^pr.displayGammaBits)';
        gammaOutput = gammaInput.^pr.displayGammaGamma;
        theDisplay.gamma = gammaOutput(:,[1 1 1]);
    end
    clear theDisplayLoad;
end

% Set some pertinent variables
wls = (400:1:700)';
theDisplay = displaySet(theDisplay,'wave',wls);
fieldSizeDegs = pr.fieldSizeMinutes / 60;

% Create and setup base cone mosaic
%
% For AO, we put in subjectID == 0 which causes the zcoeffs to be all zero
% except for any specified defocus.
if (st.aoRender)
    if (st.eccVars)
        theConeMosaic = ConeResponseCmosaic(pr.eccXDegs, pr.eccYDegs, ...
            'fovealDegree', fieldSizeDegs, 'pupilSize', st.pupilDiamMM, 'useRandomSeed', st.randSeed, ...
            'defocusDiopters',st.defocusDiopters, 'wave', wls, ...
            'subjectID', 0, ...
            'noLCA', st.noLCA, ...
            'zernikeDataBase', st.zernikeDataBase);
    else
        theConeMosaic = ConeResponseCmosaic(pr.eccXDegs, pr.eccYDegs, ...
            'fovealDegree', fieldSizeDegs, 'pupilSize', st.pupilDiamMM, 'useRandomSeed', st.randSeed, ...
            'defocusDiopters',st.defocusDiopters, 'wave', wls, ...
            'rodIntrusionAdjustedConeAperture', false, ...
            'eccVaryingConeAperture', false, ...
            'eccVaryingConeBlur', false, ...
            'eccVaryingOuterSegmentLength', false, ...
            'eccVaryingMacularPigmentDensity', false, ...
            'eccVaryingMacularPigmentDensityDynamic', false, ...
            'anchorAllEccVaryingParamsToTheirFovealValues', true, ...
            'subjectID', 0, ...
            'noLCA', st.noLCA, ...
            'zernikeDataBase', st.zernikeDataBase);
    end

    % We build a normal optics structure. Allow specified defocus.
else
    if (st.eccVars)
        % Build normal optics structure.
        theConeMosaic = ConeResponseCmosaic(pr.eccXDegs, pr.eccYDegs, ...
            'fovealDegree', fieldSizeDegs, 'pupilSize', st.pupilDiamMM, 'useRandomSeed', st.randSeed, ...
            'defocusDiopters',st.defocusDiopters, 'wave', wls, ...
            'subjectID', st.subjectID, ...
            'noLCA', st.noLCA, ...
            'zernikeDataBase', st.zernikeDataBase);
    else
        theConeMosaic = ConeResponseCmosaic(pr.eccXDegs, pr.eccYDegs, ...
            'fovealDegree', fieldSizeDegs, 'pupilSize', st.pupilDiamMM, 'useRandomSeed', st.randSeed, ...
            'defocusDiopters',st.defocusDiopters, 'wave', wls, ...
            'rodIntrusionAdjustedConeAperture', false, ...
            'eccVaryingConeAperture', false, ...
            'eccVaryingConeBlur', false, ...
            'eccVaryingOuterSegmentLength', false, ...
            'eccVaryingMacularPigmentDensity', false, ...
            'eccVaryingMacularPigmentDensityDynamic', false, ...
            'anchorAllEccVaryingParamsToTheirFovealValues', true, ...
            'subjectID', st.subjectID, ...
            'noLCA', st.noLCA, ...
            'zernikeDataBase', st.zernikeDataBase);
    end
end
end
